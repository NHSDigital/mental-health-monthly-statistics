-- Databricks notebook source
 %py
 spark.conf.set("spark.sql.legacy.allowCreatingManagedTableUsingNonemptyLocation","true")

-- COMMAND ----------

DROP TABLE IF EXISTS $personal_db.Perinatal

-- COMMAND ----------

CREATE TABLE $personal_db.Perinatal 
(REPORTING_PERIOD_START DATE,
 REPORTING_PERIOD_END DATE,
 STATUS STRING,
 BREAKDOWN STRING,
 LEVEL STRING,
 LEVEL_DESCRIPTION STRING, 
 LEVEL_2 STRING,
 LEVEL_2_Description STRING,
 METRIC STRING,
 METRIC_VALUE INT)
 USING DELTA

-- COMMAND ----------

DROP TABLE IF EXISTS $personal_db.Perinatal_Output

-- COMMAND ----------

CREATE TABLE $personal_db.Perinatal_Output
(REPORTING_PERIOD_START DATE,
 REPORTING_PERIOD_END DATE,
 STATUS STRING,
 BREAKDOWN STRING,
 LEVEL STRING,
 LEVEL_DESCRIPTION STRING, 
 LEVEL_2 STRING,
 LEVEL_2_Description STRING,
 METRIC STRING,
 METRIC_VALUE STRING) ---changed to string to account for "*" value

-- COMMAND ----------

DROP TABLE IF EXISTS $personal_db.PerinatalPeriod_DF

-- COMMAND ----------

CREATE TABLE $personal_db.PerinatalPeriod_DF
(Version STRING, 
Person_ID_Mother STRING, 
UniqPregID STRING,
StartDate DATE,
EndDate DATE, 
EndDate12m DATE,
Endate24m DATE,
AgeAtBookingMother INT,
EthnicCategoryMother STRING,
EthnicCategoryMother_Description STRING,
IC_Rec_CCG STRING, 
NAME STRING,
IMD_DECILE STRING,
rnk INT,
preg_rnk INT)

-- COMMAND ----------

DROP TABLE IF EXISTS $personal_db.MHSDSPerinatalPeriodMH_DF

-- COMMAND ----------

CREATE TABLE $personal_db.MHSDSPerinatalPeriodMH_DF
(Person_ID STRING,
Person_ID_Mother STRING,
UniqPregID STRING, 
StartDate DATE,
EndDate DATE, 
AgeAtBookingMother INT, 
EthnicCategoryMother STRING,  
EthnicCategoryMother_DESCRIPTION STRING,
IC_Rec_CCG STRING, 
NAME STRING,
rnk INT,
preg_rnk INT)

-- COMMAND ----------

CREATE OR REPLACE GLOBAL TEMPORARY VIEW ORG_DAILY AS
SELECT DISTINCT ORG_CODE,
                NAME,
                ORG_TYPE_CODE,
                ORG_OPEN_DATE, 
                ORG_CLOSE_DATE, 
                BUSINESS_START_DATE, 
                BUSINESS_END_DATE
           FROM $reference_data.org_daily
          WHERE (BUSINESS_END_DATE >= add_months('$RP_ENDDATE', 1) OR ISNULL(BUSINESS_END_DATE))
                AND BUSINESS_START_DATE <= add_months('$RP_ENDDATE', 1)	
                AND (ORG_CLOSE_DATE >= '$RP_ENDDATE' OR ISNULL(ORG_CLOSE_DATE))              
                AND ORG_OPEN_DATE <= '$RP_ENDDATE'

-- COMMAND ----------

CREATE OR REPLACE GLOBAL TEMPORARY VIEW ORG_RELATIONSHIP_DAILY AS 
SELECT 
REL_TYPE_CODE,
REL_FROM_ORG_CODE,
REL_TO_ORG_CODE, 
REL_OPEN_DATE,
REL_CLOSE_DATE
FROM 
$reference_data.ORG_RELATIONSHIP_DAILY
WHERE
(REL_CLOSE_DATE >= '$RP_ENDDATE' OR ISNULL(REL_CLOSE_DATE))              
AND REL_OPEN_DATE <= '$RP_ENDDATE'

-- COMMAND ----------

CREATE OR REPLACE GLOBAL TEMPORARY VIEW STP_MAPPING AS 

SELECT 
A.ORG_cODE as STP_CODE, 
A.NAME as STP_DESCRIPTION, 
C.ORG_CODE as CCG_CODE, 
C.NAME as CCG_DESCRIPTION,
E.ORG_CODE as REGION_CODE,
E.NAME as REGION_DESCRIPTION

FROM 
global_temp.ORG_DAILY A
LEFT JOIN global_temp.ORG_RELATIONSHIP_DAILY B ON A.ORG_CODE = B.REL_TO_ORG_CODE AND B.REL_TYPE_CODE = 'CCST'
LEFT JOIN global_temp.ORG_DAILY C ON B.REL_FROM_ORG_CODE = C.ORG_CODE
LEFT JOIN global_temp.ORG_RELATIONSHIP_DAILY D ON A.ORG_CODE = D.REL_FROM_ORG_CODE AND D.REL_TYPE_CODE = 'STCE'
LEFT JOIN global_temp.ORG_DAILY E ON D.REL_TO_ORG_CODE = E.ORG_CODE
WHERE
A.ORG_TYPE_CODE = 'ST'
AND B.REL_TYPE_CODE is not null